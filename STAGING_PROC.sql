--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\user\Desktop\L6_Module\dbslides\Assignment\Abhisek_drop.sql'

--------------------------------------------------------------
--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "stage_reported_crime" entity.

DROP TABLE stage_reported_crime;
DROP TABLE Police_employee;
DROP TABLE Station;
DROP TABLE Crime_details;

CREATE TABLE stage_reported_crime(
	crime_id	NUMBER(10) NOT NULL,
    pk_report_id NUMBER(10),
	date_reported	DATE,
	crime_category	VARCHAR2(80),
	crime_status	VARCHAR2(80),
	crime_close_date	DATE,
	fk1_officer_id	NUMBER(10),
	fk2_station_id	NUMBER(10),
    datasource VARCHAR2(80),
	-- Specify the PRIMARY KEY constraint for table "stage_reported_crime".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_stage_reported_crime PRIMARY KEY (crime_id)
);

-- Create a Database table to represent the "Police_employee" entity.
CREATE TABLE Police_employee(
	officer_id	NUMBER(10) NOT NULL,
    pk_police_id NUMBER(10),
	firstname	VARCHAR2(80),
	lastname	VARCHAR2(80),
	fk1_station_id	NUMBER(10),
    datasource VARCHAR2(80),
	-- Specify the PRIMARY KEY constraint for table "Police_employee".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Police_employee PRIMARY KEY (officer_id)
);

-- Create a Database table to represent the "Station" entity.
CREATE TABLE Station(
    station_no	NUMBER(10) NOT NULL,
    pk_station_id NUMBER(10),
	station_name	VARCHAR2(80),
	region	VARCHAR2(80),
    datasource VARCHAR2(80),
	-- Specify the PRIMARY KEY constraint for table "Station".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_s_Station PRIMARY KEY (station_no)
);

-- Create a Database table to represent the "Crime_details" entity.
CREATE TABLE Crime_details(
	c_detail_id	NUMBER(10) NOT NULL,
	crime_id	NUMBER(10) NOT NULL,
	officer_id	NUMBER(10),
	work_start_date	DATE,
	work_end_date	DATE,
    datasource VARCHAR2(80),
	-- Specify the PRIMARY KEY constraint for table "Crime_details".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Crime_details PRIMARY KEY (c_detail_id)
);

-------------------------------------------------------
------SEQUENCE AND TRIGGER FOR STATING TABLES- --------
------------------------------------------------------
   ---------------STAGE_STATION------------
DROP SEQUENCE stage_station_seq;
CREATE SEQUENCE stage_station_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER stage_station_TRIG
BEFORE INSERT ON Station
FOR EACH ROW 
BEGIN
    IF :NEW.station_no IS NULL THEN
        SELECT stage_station_seq.NEXTVAL INTO :NEW.station_no FROM SYS.DUAL;
    END IF;    
END;
/

   ---------------Crime_details------------

DROP SEQUENCE stage_crime_details_seq;
CREATE SEQUENCE stage_crime_details_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

CREATE OR REPLACE TRIGGER stage_crime_details_TRIG
BEFORE INSERT ON Crime_details
FOR EACH ROW 
BEGIN
    IF :NEW.c_detail_id IS NULL THEN
        SELECT stage_crime_details_seq.NEXTVAL INTO :NEW.c_detail_id FROM SYS.DUAL;
    END IF;    
END;
/

  ---------------Police_employees------------

DROP SEQUENCE stage_police_employee_seq;
CREATE SEQUENCE stage_police_employee_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

CREATE OR REPLACE TRIGGER stage_police_employee_TRIG
BEFORE INSERT ON Police_employee
FOR EACH ROW 
BEGIN
    IF :NEW.officer_id IS NULL THEN
        SELECT stage_police_employee_seq.NEXTVAL INTO :NEW.officer_id FROM SYS.DUAL;
    END IF;    
END;
/


  ---------------stage_reported_crime------------

DROP SEQUENCE stage_reported_crime_seq;
CREATE SEQUENCE stage_reported_crime_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

CREATE OR REPLACE TRIGGER stage_reported_crime_TRIG
BEFORE INSERT ON stage_reported_crime
FOR EACH ROW 
BEGIN
    IF :NEW.crime_id IS NULL THEN
        SELECT stage_reported_crime_seq.NEXTVAL INTO :NEW.crime_id FROM SYS.DUAL;
    END IF;    
END;
/


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------

-----------------------------------------------------------------------------------
------------------PROCEDURE TO INSERT DATA IN BULK TO STAGING AREA ----------------
-----------------------------------------------------------------------------------
------- Procedure to insert data in bulk in stateing table "Station"--------
CREATE OR REPLACE PROCEDURE PR_STAGE_STATION IS
CURSOR CURSOR_STAGE_PRCS_STATION IS -- PRCS
SELECT PL.station_id,PL.station_name,PA.area_name
FROM pl_station PL
left join pl_area PA
 ON PL.fk1_area_id = PA.area_id
WHERE NOT EXISTS(SELECT pk_station_id ,station_name, region 
               from station 
               where station.pk_station_id = PL.station_id 
               and station.station_name =PL.station_name 
               and station.region = PA.area_name  );

v_pk_station_id pl_station.station_id%TYPE;
v_station_name pl_station.station_name%TYPE;
v_station_area pl_area.area_name%TYPE;

CURSOR CURSOR_STAGE_WALE_STATION IS
SELECT L.location_id,L.city_name,R.region_name 
FROM LOCATION L
left join REGION R
ON L.region_id = R.region_id
WHERE NOT EXISTS(SELECT pk_station_id ,station_name, region 
               from station 
               where station.pk_station_id = L.location_id 
               and station.station_name =L.city_name 
               and station.region = R.region_name  );

v_Wpk_station_id location.location_id%TYPE;
v_Wstation_name location.city_name%TYPE;
v_Wstation_area region.region_name%TYPE;

BEGIN
FOR i IN CURSOR_STAGE_PRCS_STATION LOOP
v_pk_station_id := i.station_id;
v_station_name := i.station_name;
v_station_area :=i.area_name;

INSERT INTO Station(pk_station_id,station_name,region,datasource)
VALUES(v_pk_station_id,v_station_name,v_station_area,'PRCS');
END LOOP;

FOR i IN CURSOR_STAGE_WALE_STATION LOOP
v_Wpk_station_id := i.location_id;
v_Wstation_name := i.city_name;
v_Wstation_area :=i.region_name;

INSERT INTO Station(pk_station_id,station_name,region,datasource)
VALUES(v_Wpk_station_id,v_Wstation_name,v_Wstation_area,'WALE');
END LOOP;

END;
/

BEGIN
PR_STAGE_STATION;
END;
/


------- Procedure to insert data in bulk in stateing table "Police_employee"--------

CREATE OR REPLACE PROCEDURE PR_STAGE_POLICE IS
CURSOR CURSOR_STAGE_PRCS_POLICE IS -- PRCS
SELECT DISTINCT(PL.emp_name),PL.emp_id,S.station_id 
FROM pl_police_employee PL
left join pl_work_allocation W On PL.emp_id = W.d_emp_id
left join pl_reported_crime R on W.s_reported_crime_id = R.reported_crime_id
left join  pl_station S on R.fk2_station_id = S.station_id
WHERE  NOT EXISTS(SELECT  pk_police_id,firstname,lastname,fk1_station_id 
                FROM Police_employee
                WHERE Police_employee.pk_police_id= PL.emp_id
                AND Police_employee.firstname =  SUBSTR(PL.emp_name,1, INSTR(PL.emp_name, ' ')-1)
                AND Police_employee.lastname = SUBSTR(PL.emp_name, INSTR(PL.emp_name, ' ')+1)
                AND Police_employee.datasource = 'PRCS'
                AND Police_employee.fk1_station_id = S.station_id 
             );

v_pk_police_id pl_police_employee.emp_id%TYPE;
v_firstname pl_police_employee.emp_name%TYPE;
v_lastname pl_police_employee.emp_name%TYPE;
v_fk1_station_id pl_police_employee.emp_id%TYPE;

CURSOR CURSOR_STAGE_WALE_POLICE IS -- wale
SELECT DISTINCT(first_name),middle_name ,last_name ,officer_id
FROM OFFICER 
WHERE NOT EXISTS(SELECT pk_police_id,firstname,lastname,fk1_station_id 
                 FROM Police_employee
                 WHERE Police_employee.pk_police_id= OFFICER.officer_id 
                 AND Police_employee.firstname =  OFFICER.first_name
                 AND Police_employee.lastname = OFFICER.middle_name ||' '|| OFFICER.last_name
                AND Police_employee.datasource = 'WALE'
                );

v_Wpk_police_id pl_police_employee.emp_id%TYPE;
v_Wfirstname pl_police_employee.emp_name%TYPE;
v_Wlastname pl_police_employee.emp_name%TYPE;
v_Wfk1_station_id pl_police_employee.emp_id%TYPE;

BEGIN
FOR i IN CURSOR_STAGE_PRCS_POLICE LOOP
v_pk_police_id := i.emp_id;
v_firstname := SUBSTR(i.emp_name,1, INSTR(i.emp_name, ' ')-1);
v_lastname := SUBSTR(i.emp_name, INSTR(i.emp_name, ' ')+1);
v_fk1_station_id  := i.station_id;

INSERT INTO Police_employee(pk_police_id,firstname,lastname,fk1_station_id,datasource)
VALUES(v_pk_police_id,v_firstname,v_lastname,v_fk1_station_id,'PRCS' );
END LOOP;

FOR i IN CURSOR_STAGE_WALE_POLICE LOOP
v_Wpk_police_id := i.officer_id;
v_Wfirstname := i.first_name;
v_Wlastname := i.middle_name ||' '|| i.last_name;
v_Wfk1_station_id  := NULL;

INSERT INTO Police_employee(pk_police_id,firstname,lastname,fk1_station_id,datasource)
VALUES(v_Wpk_police_id,v_Wfirstname,v_Wlastname,v_Wfk1_station_id,'WALE' );
END LOOP;
END;
/

BEGIN
PR_STAGE_POLICE ;
END;
/

-- ------- Procedure to insert data in bulk in stateing table "stage_reported_crime"--------


CREATE OR REPLACE PROCEDURE PR_STAGE_REPORTED_CRIME IS
CURSOR CURSOR_STAGE_PRCS_POLICE IS -- PRCS
SELECT P.reported_crime_id, P.date_reported,P.crime_status, P.date_closed, PC.crime_type_desc,P.fk2_station_id,PW.d_emp_id
FROM pl_reported_crime P
left join pl_work_allocation PW
on  P.reported_crime_id = PW.s_reported_crime_id 
left join  pl_crime_type PC
on P.fk1_crime_type_id = PC.crime_type_id
AND NOT EXISTS(
    SELECT * from stage_reported_crime
    WHERE stage_reported_crime.pk_report_id = P.reported_crime_id
    AND stage_reported_crime.date_reported = P.date_reported
    AND stage_reported_crime.crime_status = P.crime_status
    AND stage_reported_crime.fk1_officer_id = PW.d_emp_id
    AND stage_reported_crime.fk2_station_id = P.fk2_station_id
    AND stage_reported_crime.datasource = 'PRCS'
);
    v_pk_report_id pl_reported_crime.reported_crime_id%TYPE;
	v_date_reported	pl_reported_crime.date_reported%TYPE;
	v_crime_category pl_crime_type.crime_type_desc%TYPE;
	v_crime_status	pl_reported_crime.crime_status%TYPE;
	v_crime_close_date	pl_reported_crime.date_closed%TYPE;
	v_fk1_officer_id pl_work_allocation.d_emp_id%TYPE;
	v_fk2_station_id pl_reported_crime.fk2_station_id%TYPE;

    CURSOR CURSOR_STAGE_WALE_POLICE IS 
       SELECT CR.CRIME_ID, CR.REPORTED_DATE , CR.CRIME_NAME  ,CR.CRIME_STATUS, CR.CLOSED_DATE , CR.POLICE_ID
    FROM CRIME_REGISTER CR
    WHERE NOT EXISTS(
            SELECT PK_REPORT_ID, DATE_REPORTED,CRIME_CATEGORY,CRIME_STATUS,CRIME_CLOSE_DATE,FK1_OFFICER_ID
            from stage_reported_crime
            WHERE stage_reported_crime.PK_REPORT_ID = CR.CRIME_ID
            AND stage_reported_crime.DATE_REPORTED = CR.REPORTED_DATE
            AND stage_reported_crime.CRIME_STATUS = CR.CRIME_STATUS 
            AND stage_reported_crime.fk1_officer_id = CR.POLICE_ID
            AND stage_reported_crime.datasource = 'WALE'
);

    BEGIN
FOR i IN CURSOR_STAGE_PRCS_POLICE  LOOP
   v_pk_report_id := i.reported_crime_id;
   v_date_reported	:= i.date_reported;
   v_crime_category:= i.crime_type_desc;
   v_crime_status := i.crime_status;
   v_crime_close_date := i.date_closed;
   v_fk1_officer_id := i.d_emp_id;
   v_fk2_station_id := i.fk2_station_id;

INSERT INTO stage_reported_crime(pk_report_id,date_reported,crime_category,crime_status, crime_close_date,fk1_officer_id,fk2_station_id, datasource)
VALUES(v_pk_report_id,v_date_reported,v_crime_category,v_crime_status ,v_crime_close_date,v_fk1_officer_id,v_fk2_station_id,'PRCS');
END LOOP;

FOR i IN CURSOR_STAGE_WALE_POLICE LOOP
INSERT INTO stage_reported_crime(pk_report_id,date_reported,crime_category,crime_status, crime_close_date,fk1_officer_id,fk2_station_id, datasource)
VALUES(i.crime_id,i.reported_date,i.crime_name,i.crime_status,i.closed_date,i.police_id,null,'WALE');
END LOOP;
END;
/

BEGIN
PR_STAGE_REPORTED_CRIME;
END;
/


-- ------- Procedure to insert data in bulk in stateing table "Crime_details"--------

CREATE OR REPLACE PROCEDURE PR_STAGE_CRIME_DETAILS IS
CURSOR CURSOR_STAGE_PRCS_CDETAILS IS
SELECT PA.s_reported_crime_id,PA.d_emp_id,PA.work_start_date,PA.work_end_date
FROM pl_work_allocation PA
WHERE NOT EXISTS(
    SELECT crime_id,officer_id,work_start_date,work_end_date
    FROM Crime_details CD
    WHERE CD.crime_id = PA.s_reported_crime_id
    AND CD.officer_id = PA.d_emp_id
    AND CD.work_start_date	 = PA.work_start_date
    AND CD.work_end_date = PA.work_end_date	
    AND CD.datasource = 'PRCS'
);

CURSOR CURSOR_STAGE_WALE_CDETAILS IS
   SELECT CV.crime_id, CV.police_id
     FROM CRIME_REGISTER CV
     WHERE NOT EXISTS(
         SELECT crime_id,officer_id,work_start_date,work_end_date
    FROM Crime_details CD
    WHERE CD.crime_id = CV.crime_id
    AND CD.officer_id = CV.police_id
    AND CD.WORK_START_DATE IS NULL 
    AND CD.WORK_END_DATE IS NULL
    AND CD.datasource = 'WALE'
     );
BEGIN
FOR i IN CURSOR_STAGE_PRCS_CDETAILS LOOP
    Insert into Crime_details(crime_id,officer_id,work_start_date,work_end_date, datasource)
    VALUES(i.s_reported_crime_id,i.d_emp_id,i.work_start_date,i.work_end_date,'PRCS');
END LOOP;

FOR i IN CURSOR_STAGE_WALE_CDETAILS LOOP
    Insert into Crime_details(crime_id,officer_id,work_start_date,work_end_date, datasource)
    VALUES(i.crime_id,i.police_id,NULL,NULL,'WALE');
END LOOP;

END;
/

BEGIN
PR_STAGE_CRIME_DETAILS;
END;
/

