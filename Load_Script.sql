--------------------------------------------------------------
-- Database table removal script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- note: spaces within table names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- Use this script to drop the tables created by -
--   '\\Mac\Home\Documents\Dim_tables.sql'

-- Dropping a table has the effect of removing it from the Database.  All existing data is lost
-- as well as the definition of the table itself (stored as meta-data).  Dropping the tables allows
-- them to be re-created within the Database, even if they already exist.


--------------------------------------------------------------

-- Drop tables --

DROP TABLE  dim_reported_crime CASCADE CONSTRAINT;

DROP TABLE  dim_police_employee CASCADE CONSTRAINT;

DROP TABLE   dim_station CASCADE CONSTRAINT;

DROP TABLE    dim_crime_details CASCADE CONSTRAINT;

DROP TABLE   dim_time CASCADE CONSTRAINT;

DROP TABLE   fact_crime_report CASCADE CONSTRAINT;


--------------------------------------------------------------
-- End of DDL DROP file auto-generation
--------------------------------------------------------------

--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   '\\Mac\Home\Documents\Dim_tables_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "dim_reported_crime" entity.
CREATE TABLE dim_reported_crime(
	crime_id	INTEGER NOT NULL,
	pk_report_id	INTEGER NOT NULL,
	date_reported	DATE,
	crime_close_date	DATE,
	crime_category	VARCHAR(255),
	crime_status	VARCHAR(255),
	-- Specify the PRIMARY KEY constraint for table "dim_reported_crime".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dim_reported_crime PRIMARY KEY (crime_id)
);

-- Create a Database table to represent the "dim_police_employee" entity.
CREATE TABLE dim_police_employee(
	officer_id	INTEGER NOT NULL,
	pk_police_id	INTEGER NOT NULL,
	firstname	VARCHAR(255),
	lastname	VARCHAR(255),
	-- Specify the PRIMARY KEY constraint for table "dim_police_employee".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dim_police_employee PRIMARY KEY (officer_id)
);

-- Create a Database table to represent the "dim_station" entity.
CREATE TABLE dim_station(
	station_no	INTEGER NOT NULL,
	pk_station_id	INTEGER NOT NULL,
	station_name	VARCHAR(255),
	region	VARCHAR(255),
	-- Specify the PRIMARY KEY constraint for table "dim_station".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dim_station PRIMARY KEY (station_no)
);

-- Create a Database table to represent the "dim_crime_details" entity.
CREATE TABLE dim_crime_details(
	c_detail_id	INTEGER NOT NULL,
	crime_id	INTEGER NOT NULL,
	work_start_date	DATE,
	work_end_date	DATE,
	-- Specify the PRIMARY KEY constraint for table "dim_crime_details".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dim_crime_details PRIMARY KEY (c_detail_id)
);

-- Create a Database table to represent the "dim_time" entity.
CREATE TABLE dim_time(
	dim_time_id	INTEGER NOT NULL,
	month	INTEGER,
	year	INTEGER,
    day integer,
	-- Specify the PRIMARY KEY constraint for table "dim_time".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dim_time PRIMARY KEY (dim_time_id)
);

-- Create a Database table to represent the "fact_crime_report" entity.
CREATE TABLE fact_crime_report(
	fact_id	INTEGER NOT NULL,
	fk1_station_no	INTEGER NOT NULL,
	fk2_crime_id	INTEGER NOT NULL,
	fk3_officer_id	INTEGER NOT NULL,
	fk4_dim_time_id	INTEGER NOT NULL,
	fk5_c_detail_id	INTEGER NOT NULL,
    total_crime 	INTEGER,
    pending_crime INTEGER ,
    closed_crime INTEGER,

	-- Specify the PRIMARY KEY constraint for table "fact_crime_report".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_fact_crime_report PRIMARY KEY (fact_id)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "fact_crime_report_dim_station" relationship

-- This constraint ensures that the foreign key of table "fact_crime_report"
-- correctly references the primary key of table "dim_station"

ALTER TABLE fact_crime_report ADD CONSTRAINT fk1_fact_crime_report_to_dim_station FOREIGN KEY(fk1_station_no) REFERENCES dim_station(station_no);

-- Alter table to add new constraints required to implement the "fact_crime_report_dim_reported_crime" relationship

-- This constraint ensures that the foreign key of table "fact_crime_report"
-- correctly references the primary key of table "dim_reported_crime"

ALTER TABLE fact_crime_report ADD CONSTRAINT fk2_fact_crime_report_to_dim_reported_crime FOREIGN KEY(fk2_crime_id) REFERENCES dim_reported_crime(crime_id);

-- Alter table to add new constraints required to implement the "fact_crime_report_dim_police_employee" relationship

-- This constraint ensures that the foreign key of table "fact_crime_report"
-- correctly references the primary key of table "dim_police_employee"

ALTER TABLE fact_crime_report ADD CONSTRAINT fk3_fact_crime_report_to_dim_police_employee FOREIGN KEY(fk3_officer_id) REFERENCES dim_police_employee(officer_id) ;

-- Alter table to add new constraints required to implement the "fact_crime_report_dim_time" relationship

-- This constraint ensures that the foreign key of table "fact_crime_report"
-- correctly references the primary key of table "dim_time"

ALTER TABLE fact_crime_report ADD CONSTRAINT fk4_fact_crime_report_to_dim_time FOREIGN KEY(fk4_dim_time_id) REFERENCES dim_time(dim_time_id) ;

-- Alter table to add new constraints required to implement the "fact_crime_report_dim_crime_details" relationship

-- This constraint ensures that the foreign key of table "fact_crime_report"
-- correctly references the primary key of table "dim_crime_details"

ALTER TABLE fact_crime_report ADD CONSTRAINT fk5_fact_crime_report_to_dim_crime_details FOREIGN KEY(fk5_c_detail_id) REFERENCES dim_crime_details(c_detail_id);


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------

--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR dim_reported_crime
--------------------------------------------------------------

DROP SEQUENCE dim_reported_crime_seq;
CREATE SEQUENCE dim_reported_crime_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER dim_reported_crime_TRIG
BEFORE INSERT ON dim_reported_crime
FOR EACH ROW 
BEGIN
    IF :NEW.crime_id IS NULL THEN
        SELECT dim_reported_crime_seq.NEXTVAL INTO :NEW.crime_id FROM SYS.DUAL;
    END IF;    
END;
/


--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR dim_police_employee
--------------------------------------------------------------
DROP SEQUENCE dim_police_employee_seq;
CREATE SEQUENCE dim_police_employee_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER dim_police_employee_TRIG
BEFORE INSERT ON dim_police_employee
FOR EACH ROW 
BEGIN
    IF :NEW.officer_id IS NULL THEN
        SELECT dim_police_employee_seq.NEXTVAL INTO :NEW.officer_id FROM SYS.DUAL;
    END IF;    
END;
/

--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR dim_station
--------------------------------------------------------------
DROP SEQUENCE dim_station_seq;
CREATE SEQUENCE dim_station_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER dim_station_TRIG
BEFORE INSERT ON dim_station
FOR EACH ROW 
BEGIN
    IF :NEW.station_no IS NULL THEN
        SELECT dim_station_seq.NEXTVAL INTO :NEW.station_no FROM SYS.DUAL;
    END IF;    
END;
/

--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR dim_crime_details
--------------------------------------------------------------
DROP SEQUENCE dim_crime_details_seq;
CREATE SEQUENCE dim_crime_details_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER dim_crime_details_TRIG
BEFORE INSERT ON dim_crime_details
FOR EACH ROW 
BEGIN
    IF :NEW.c_detail_id IS NULL THEN
        SELECT dim_crime_details_seq.NEXTVAL INTO :NEW.c_detail_id FROM SYS.DUAL;
    END IF;    
END;
/


--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR dim_time
--------------------------------------------------------------
DROP SEQUENCE dim_time_seq;
CREATE SEQUENCE dim_time_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER dim_time_TRIG
BEFORE INSERT ON dim_time
FOR EACH ROW 
BEGIN
    IF :NEW.dim_time_id IS NULL THEN
        SELECT dim_time_seq.NEXTVAL INTO :NEW.dim_time_id FROM SYS.DUAL;
    END IF;    
END;
/


--------------------------------------------------------------
-- SEQUENCE AND TRIGGER FOR fact_crime_report
--------------------------------------------------------------
DROP SEQUENCE fact_crime_report_seq;
CREATE SEQUENCE fact_crime_report_seq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1;
/

   CREATE OR REPLACE TRIGGER fact_crime_report_TRIG
BEFORE INSERT ON fact_crime_report
FOR EACH ROW 
BEGIN
    IF :NEW.fact_id IS NULL THEN
        SELECT fact_crime_report_seq.NEXTVAL INTO :NEW.fact_id FROM SYS.DUAL;
    END IF;    
END;
/


-------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
             -- LOANDING DATA FROM TRANSFER TABLE TO DIM TABLE --
-----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             -- LOANDING DATA FROM TRANSFER TABLE (TRANSFER_REPORTED_CRIME)  TO DIM TABLE(dim_reported_crime) --
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_dim_reported_crime IS
BEGIN
  MERGE INTO dim_reported_crime DC
  USING TRANSFER_REPORTED_CRIME TC
  ON(DC.CRIME_ID = TC.crime_id)
             
             WHEN NOT MATCHED THEN
               INSERT (pk_report_id,date_reported, crime_close_date, crime_category, crime_status)
               VALUES(TC.PK_REPORT_ID, TC.DATE_REPORTED, TC.CRIME_CLOSE_DATE, TC.CRIME_CATEGORY, TC.CRIME_STATUS);
END;
/

BEGIN
PRO_dim_reported_crime;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             -- LOANDING DATA FROM TRANSFER TABLE (TRANSFER_POLICE_EMPLOYEE)  TO DIM TABLE(dim_police_employee) --
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_dim_police_employee IS
BEGIN
  MERGE INTO dim_police_employee DE
  USING TRANSFER_POLICE_EMPLOYEE TE
  ON(DE.officer_id = TE.OFFICER_ID)
             
             WHEN NOT MATCHED THEN
               INSERT (pk_police_id,firstname,lastname)
               VALUES(TE.PK_POLICE_ID,TE.FIRSTNAME,TE.LASTNAME);
END ;
/

BEGIN
PRO_dim_police_employee;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             -- LOANDING DATA FROM TRANSFER TABLE (TRANSFER_STATION) TO DIM TABLE(dim_station) --
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_dim_station IS
BEGIN
  MERGE INTO dim_station DS
  USING TRANSFER_STATION TS
  ON(DS.station_no = TS.STATION_NO)
             
             WHEN NOT MATCHED THEN
               INSERT (pk_station_id,station_name,region)
               VALUES(TS.PK_STATION_ID,TS.STATION_NAME,TS.REGION);
END ;
/

BEGIN
PRO_dim_station;
END;
/


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             -- LOANDING DATA FROM TRANSFER TABLE (TRANSFER_CRIME_DETAILS) TO DIM TABLE(dim_crime_details) --
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_dim_crime_details IS
BEGIN
  MERGE INTO dim_crime_details DC
  USING TRANSFER_CRIME_DETAILS TC
  ON(DC.c_detail_id = TC.C_DETAIL_ID)
             
             WHEN NOT MATCHED THEN
               INSERT (crime_id,work_start_date,work_end_date)
               VALUES(TC.CRIME_ID, TC.WORK_START_DATE, TC.WORK_END_DATE);
END ;
/

BEGIN
PRO_dim_crime_details;
END;
/


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                       -- LOANDING DATA IN DIM TABLE(dim_time) --
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_dim_time IS
    CURSOR CUR_DimTime IS
        SELECT DISTINCT EXTRACT(YEAR FROM DATE_REPORTED) AS YEAR,
            EXTRACT(MONTH FROM DATE_REPORTED) AS MONTH,
            EXTRACT(DAY FROM DATE_REPORTED) AS DAY
        FROM TRANSFER_REPORTED_CRIME
        UNION ALL
        SELECT DISTINCT EXTRACT(YEAR FROM CRIME_CLOSE_DATE) AS YEAR,
            EXTRACT(MONTH FROM CRIME_CLOSE_DATE) AS MONTH,
            EXTRACT(DAY FROM CRIME_CLOSE_DATE) AS DAY
        FROM TRANSFER_REPORTED_CRIME;

    V_COUNT INTEGER;
BEGIN
    FOR REC IN CUR_DimTime LOOP
        SELECT COUNT(*) INTO V_COUNT FROM dim_time WHERE YEAR = REC.YEAR AND MONTH = REC.MONTH AND DAY = REC.DAY;

        IF NVL(V_COUNT, 0) = 0 THEN
            INSERT INTO dim_time(YEAR,MONTH,DAY) VALUES (REC.YEAR, REC.MONTH,REC.DAY);
        END IF;
    END LOOP;
END;
/

BEGIN
    PRO_dim_time;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                   --LOADING DATA TO FACT TABLE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRO_INSERT_FACT_TABLE IS
 BEGIN
  MERGE INTO fact_crime_report FAC
  USING( SELECT E.officer_id, C.crime_id,S.station_no, D.c_detail_id, T.dim_time_id,
  (SELECT COUNT(PK_REPORT_ID)FROM dim_reported_crime) AS TOTAL_REPORTED_CRIME,
  (SELECT COUNT(PK_REPORT_ID ) FROM dim_reported_crime WHERE CRIME_STATUS = 'OPEN') AS OPEN_CRIME,
  (SELECT COUNT(PK_REPORT_ID) FROM dim_reported_crime WHERE CRIME_STATUS = 'CLOSED') AS CLOSED_CRIME
         FROM   dim_reported_crime C
           inner join  TRANSFER_REPORTED_CRIME F ON F.PK_REPORT_ID = C.pk_report_id
           inner join  dim_police_employee E ON F.FK1_OFFICER_ID  = E.pk_police_id 
           inner  join  dim_station S ON F.FK2_STATION_ID = S.pk_station_id
           inner  join  dim_time T ON T.YEAR =  TO_CHAR(F.DATE_REPORTED,'YYYY')
           inner  join  dim_crime_details D ON D.crime_id = F.PK_REPORT_ID
         ) TAB
     ON (FAC.fk1_station_no = TAB.station_no 
     AND FAC.fk2_crime_id = TAB.crime_id 
     AND FAC.fk3_officer_id = TAB.officer_id
     AND FAC.fk4_dim_time_id = TAB.dim_time_id
     AND FAC.fk5_c_detail_id = TAB.c_detail_id)

        WHEN NOT MATCHED THEN
          INSERT(fk1_station_no,fk2_crime_id,fk3_officer_id,fk4_dim_time_id,fk5_c_detail_id,total_crime,pending_crime,closed_crime)
          VALUES(TAB.station_no,TAB.crime_id,TAB.officer_id,TAB.dim_time_id,TAB.C_DETAIL_ID,TAB.TOTAL_REPORTED_CRIME,
          TAB.OPEN_CRIME,TAB.CLOSED_CRIME);
 END;
 /

 BEGIN
PRO_INSERT_FACT_TABLE;
 END;

 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------